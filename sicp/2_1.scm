#lang planet neil/sicp
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

;(define (make-rat raw-n raw-d)
;  (let ((signal (if (> (* raw-n raw-d) 0) 1 -1))
;        (n (abs raw-n))
;        (d (abs raw-d)))
;    (let ((g (gcd n d)))
;      (cons (* n signal) d))))


(define (make-rat n d)
  (define (make-raw-rat n d)
    (let ((g (gcd n d)))
      (cons (/ n g) (/ d g))))
  (if (< d 0)
      (make-raw-rat (- n) (- d))
      (make-raw-rat n d)))
(define numer car)
(define denom cdr)