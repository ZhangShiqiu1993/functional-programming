#lang planet neil/sicp
(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ".")
  (display (y-point p))
  (display ")"))

(define (make-segment start-point end-point)
  (cons start-point end-point))
(define (start-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))

(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))

(define (midpoint-segment segment)
  (define (average a b) (/ (+ a b) 2))
  (let ((start (start-segment segment))
        (end (end-segment segment)))
    (define x (average (x-point start)
                       (x-point end)))
    (define y (average (y-point start)
                       (y-point end)))
    (make-point x y)))

(define (get-area rectangle)
  (let ((a (get-length rectangle))
        (b (get-width rectangle)))
    (* (seg-distance a) (seg-distance b))))
(define (get-perimeter rectangle)
  (let ((a (get-length rectangle))
        (b (get-width rectangle)))
    (* (+ (seg-distance a) (seg-distance b)) 2)))

;(define (make-rectangle line-a line-b) (cons line-a line-b))
;(define (get-length rectangle) (car rectangle))
;(define (get-width rectangle) (cdr rectangle))

(define (make-rectangle cross-a cross-b)
  (cons cross-a cross-b))
(define (cross-a rec) (car rec))
(define (cross-b rec) (cdr rec))
(define (get-length rectangle)
  (let ((a (start-segment (cross-a rectangle)))
        (b (start-segment (cross-b rectangle))))
    (make-segment a b)))

(define (get-width rectangle)
  (let ((a (start-segment (cross-a rectangle)))
        (b (end-segment (cross-b rectangle))))
    (make-segment a b)))

(define (seg-distance seg)
  (let ((start (start-segment seg))
        (end (end-segment seg)))
    (distance start end)))
(define (distance a b)
  (define (square x)(* x x))
  (let ((dx (abs (- (x-point a)
                    (x-point b))))
        (dy (abs (- (y-point a)
                    (y-point b)))))
    (sqrt (+ (square dx) (square dy)))))


(define point-a (make-point 0 0))
(define point-b (make-point 2 0))
(define point-c (make-point 2 2))
(define point-d (make-point 0 2))
;(define line-p (make-segment point-a point-b))
;(define line-q (make-segment point-a point-d))
;(define rectangle-1 (make-rectangle line-p line-q))
(define cross-p (make-segment point-a point-c))
(define cross-q (make-segment point-b point-d))
(define rectangle-2 (make-rectangle cross-q cross-p))
(define (test-result rec)
  (define perimeter (get-perimeter rec))
  (define area (get-area rec))
  (display "周长： ")
  (display perimeter)
  (newline)
  (display "面积： ")
  (display area))
;(test-result rectangle-1)
(test-result rectangle-2)